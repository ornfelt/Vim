===============================================================================
=    W e l c o m e   t o   t h e   V I M   T u t o r    -    Version 1.5      =
===============================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 1.1:  MOVING THE CURSOR


   ** To move the cursor, press the h,j,k,l keys as indicated. **
	     ^
	     k		    Hint:  The h key is at the left and moves left.
    < h	   l >		   The l key is at the right and moves right.
	     j			   The j key looks like a down arrow
	     v

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Lesson 1.3: TEXT EDITING - DELETION


** While in Normal mode press	x  to delete the character under the cursor. **

---> The ccow jumpedd ovverr thhe mooon.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Lesson 1.4: TEXT EDITING - INSERTION


	 ** While in Normal mode press  i  to insert text. **

---> There is text misng this .
---> There is some text missing from this line.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 2.1: DELETION COMMANDS


	    ** Type  dw  to delete to the end of a word. **

---> There are a some words fun that don't belong paper in this sentence.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      Lesson 2.2: MORE DELETION COMMANDS


	   ** Type  d$	to delete to the end of the line. **

---> Somebody typed the end of this line twice. end of this line twice.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Lesson 2.3: ON COMMANDS AND OBJECTS


  The format for the  d  delete command is as follows:

	 [number]   d	object	    OR	     d	 [number]   object
  Where:
    number - is how many times to execute the command (optional, default=1).
    d - is the command to delete.
    object - is what the command will operate on (listed below).

  A short list of objects:
    w - from the cursor to the end of the word, including the space.
    e - from the cursor to the end of the word, NOT including the space.
    $ - from the cursor to the end of the line.

NOTE:  For the adventurous, pressing just the object while in Normal mode
       without a command will move the cursor as specified in the object list.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Lesson 2.4: AN EXCEPTION TO  'COMMAND-OBJECT'


	       ** Type	 dd   to delete a whole line. **

      1)  Roses are red,
      2)  Mud is fun,
      3)  Violets are blue,
      4)  I have a car,
      5)  Clocks tell time,
      6)  Sugar is sweet
      7)  And so are you.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 Lesson 2.5: THE UNDO COMMAND


   ** Press  u	to undo the last commands,   U	 to fix a whole line. **

  1. Move the cursor to the line below marked ---> and place it on the
     first error.
  2. Type  x  to delete the first unwanted character.
  3. Now type  u  to undo the last command executed.
  4. This time fix all the errors on the line using the  x  command.
  5. Now type a capital  U  to return the line to its original state.
  6. Now type  u  a few times to undo the  U  and preceding commands.
  7. Now type CTRL-R (keeping CTRL key pressed while hitting R) a few times
     to redo the commands (undo the undo's).

---> Fiix the errors oon thhis line and reeplace them witth undo.

  8. These are very useful commands.  Now move on to the Lesson 2 Summary.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 Lesson 3.1: THE PUT COMMAND


       ** Type	p  to put the last deletion after the cursor. **


     d) Can you learn too?
     b) Violets are blue,
     c) Intelligence is learned,
     a) Roses are red,


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       Lesson 3.2: THE REPLACE COMMAND


  ** Type  r  and a character to replace the character under the cursor. **


--->  Whan this lime was tuoed in, someone presswd some wrojg keys!
--->  When this line was typed in, someone pressed some wrong keys!


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 3.3: THE CHANGE COMMAND


	   ** To change part or all of a word, type  cw . **


---> This lubw has a few wptfd that mrrf changing usf the change command.
---> This line has a few words that need changing using the change command.

Notice that  cw  not only replaces the word, but also places you in insert.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       Lesson 3.4: MORE CHANGES USING c


     ** The change command is used with the same objects as delete. **

  1. The change command works in the same way as delete.  The format is:

       [number]   c   object	   OR	    c	[number]   object

  2. The objects are also the same, such as   w (word), $ (end of line), etc.

  3. Move to the first line below marked --->.

  4. Move the cursor to the first error.

  5. Type  c$  to make the rest of the line like the second and press <ESC>.

---> The end of this line needs some help to make it like the second.
---> The end of this line needs to be corrected using the  c$  command.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Lesson 4.1: LOCATION AND FILE STATUS


  ** Type CTRL-g to show your location in the file and the file status.
     Type SHIFT-G to move to a line in the file. **

  Note: Read this entire lesson before executing any of the steps!!

  1. Hold down the Ctrl key and press  g .  A status line will appear at the
     bottom of the page with the filename and the line you are on.  Remember
     the line number for Step 3.

  2. Press shift-G to move you to the bottom of the file.

  3. Type in the number of the line you were on and then shift-G.  This will
     return you to the line you were on when you first pressed Ctrl-g.
     (When you type in the numbers, they will NOT be displayed on the screen.)

  4. If you feel confident to do this, execute steps 1 through 3.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 4.2: THE SEARCH COMMAND


     ** Type  /  followed by a phrase to search for the phrase. **

  1. In Normal mode type the  /  character.  Notice that it and the cursor
     appear at the bottom of the screen as with the  :	command.

  2. Now type 'errroor' <ENTER>.  This is the word you want to search for.

  3. To search for the same phrase again, simply type  n .
     To search for the same phrase in the opposite direction, type  Shift-N .

  4. If you want to search for a phrase in the backwards direction, use the
     command  ?  instead of /.

---> When the search reaches the end of the file it will continue at the start.

  "errroor" is not the way to spell error;  errroor is an error.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   Lesson 4.3: MATCHING PARENTHESES SEARCH


	      ** Type  %  to find a matching ),], or } . **

  1. Place the cursor on any (, [, or { in the line below marked --->.

  2. Now type the  %  character.

  3. The cursor should be on the matching parenthesis or bracket.

  4. Type  %  to move the cursor back to the first bracket (by matching).

---> This ( is a test line with ('s, ['s ] and {'s } in it. ))

Note: This is very useful in debugging a program with unmatched parentheses!


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      Lesson 4.4: A WAY TO CHANGE ERRORS


	** Type  :s/old/new/g  to substitute 'new' for 'old'. **

  1. Move the cursor to the line below marked --->.

  2. Type  :s/thee/the <ENTER> .  Note that this command only changes the
     first occurrence on the line.

  3. Now type	 :s/thee/the/g	   meaning substitute globally on the line.
     This changes all occurrences on the line.

---> thee best time to see thee flowers is in thee spring.

  4. To change every occurrence of a character string between two lines,
     type   :#,#s/old/new/g    where #,# are the numbers of the two lines.
     Type   :%s/old/new/g    to change every occurrence in the whole file.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       LESSON 4 SUMMARY


  1. Ctrl-g  displays your location in the file and the file status.
     Shift-G  moves to the end of the file.  A line number followed
     by  Shift-G  moves to that line number.

  2. Typing  /	followed by a phrase searches FORWARD for the phrase.
     Typing  ?	followed by a phrase searches BACKWARD for the phrase.
     After a search type  n  to find the next occurrence in the same direction
     or  Shift-N  to search in the opposite direction.

  3. Typing  %	while the cursor is on a  (,),[,],{, or }  locates its
     matching pair.

  4. To substitute new for the first old on a line type    :s/old/new
     To substitute new for all 'old's on a line type	   :s/old/new/g
     To substitute phrases between two line #'s type	   :#,#s/old/new/g
     To substitute all occurrences in the file type	   :%s/old/new/g
     To ask for confirmation each time add 'c'		   :%s/old/new/gc


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND


   ** Type  :!	followed by an external command to execute that command. **

  1. Type the familiar command	:  to set the cursor at the bottom of the
     screen.  This allows you to enter a command.

  2. Now type the  !  (exclamation point) character.  This allows you to
     execute any external shell command.

  3. As an example type   ls   following the ! and then hit <ENTER>.  This
     will show you a listing of your directory, just as if you were at the
     shell prompt.  Or use   :!dir  if ls doesn't work.

---> Note:  It is possible to execute any external command this way.

---> Note:  All  :  commands must be finished by hitting <ENTER>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      Lesson 5.2: MORE ON WRITING FILES


     ** To save the changes made to the file, type  :w FILENAME. **

  1. Type  :!dir  or  :!ls  to get a listing of your directory.
     You already know you must hit <ENTER> after this.

  2. Choose a filename that does not exist yet, such as TEST.

  3. Now type:	 :w TEST   (where TEST is the filename you chose.)

  4. This saves the whole file	(Vim Tutor)  under the name TEST.
     To verify this, type    :!dir   again to see your directory

---> Note that if you were to exit Vim and enter again with the filename TEST,
     the file would be an exact copy of the tutor when you saved it.

  5. Now remove the file by typing (MS-DOS):    :!del TEST


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		    Lesson 5.3: A SELECTIVE WRITE COMMAND


	** To save part of the file, type   :#,# w FILENAME **

  1. Once again, type  :!dir  or  :!ls  to obtain a listing of your directory
     and choose a suitable filename such as TEST.

  2. Move the cursor to the top of this page and type  Ctrl-g  to find the
     number of that line.  REMEMBER THIS NUMBER!

  3. Now move to the bottom of the page and type  Ctrl-g again.  REMEMBER THIS
     LINE NUMBER ALSO!

  4. To save ONLY a section to a file, type   :#,# w TEST   where #,# are
     the two numbers you remembered (top,bottom) and TEST is your filename.

  5. Again, see that the file is there with  :!dir  but DO NOT remove it.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   Lesson 5.4: RETRIEVING AND MERGING FILES


       ** To insert the contents of a file, type   :r FILENAME **

  1. Type   :!dir   to make sure your TEST filename is present from before.

  2. Place the cursor at the top of this page.

NOTE:  After executing Step 3 you will see Lesson 5.3.	Then move DOWN to
       this lesson again.

  3. Now retrieve your TEST file using the command   :r TEST   where TEST is
     the name of the file.

NOTE:  The file you retrieve is placed starting where the cursor is located.

  4. To verify that a file was retrieved, cursor back and notice that there
     are now two copies of Lesson 5.3, the original and the file version.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       LESSON 5 SUMMARY


  1.  :!command  executes an external command.

      Some useful examples are (MS-DOS):
	  :!dir			-  shows a directory listing.
	  :!del FILENAME	-  removes file FILENAME.

  2.  :w FILENAME  writes the current Vim file to disk with name FILENAME.

  3.  :#,#w FILENAME  saves the lines # through # in file FILENAME.

  4.  :r FILENAME  retrieves disk file FILENAME and inserts it into the
      current file following the cursor position.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 Lesson 6.1: THE OPEN COMMAND


 ** Type  o  to open a line below the cursor and place you in Insert mode. **

  4. To open up a line ABOVE the cursor, simply type a capital	O , rather
     than a lowercase  o.  Try this on the line below.
Open up a line above this by typing Shift-O while the cursor is on this line.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Lesson 6.2: THE APPEND COMMAND


	     ** Type  a  to insert text AFTER the cursor. **

  1. Move the cursor to the end of the first line below marked ---> by
     typing  $	in Normal mode.

  2. Type an  a  (lowercase) to append text AFTER the character under the
     cursor.  (Uppercase  A  appends to the end of the line.)

Note: This avoids typing  i , the last character, the text to insert, <ESC>,
      cursor-right, and finally, x , just to append to the end of a line!


---> This line will allow you to practice
---> This line will allow you to practice appending text to the end of a line.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		    Lesson 6.3: ANOTHER VERSION OF REPLACE


      ** Type a capital  R  to replace more than one character. **


---> To make the first line the same as the last on this page use the keys.
---> To make the first line the same as the second, type R and the new text.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			    Lesson 6.4: SET OPTION


	  ** Set an option so a search or substitute ignores case **


  1. Search for 'ignore' by entering:
     /ignore
     Repeat several times by hitting the n key

  2. Set the 'ic' (Ignore case) option by typing:
     :set ic

  3. Now search for 'ignore' again by entering: n
     Repeat search several more times by hitting the n key

  4. Set the 'hlsearch' and 'incsearch' options:
     :set hls is

  5. Now enter the search command again, and see what happens:
     /ignore


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       LESSON 7: ON-LINE HELP COMMANDS


		      ** Use the on-line help system **

  Vim has a comprehensive on-line help system.  To get started, try one of
  these three:
	- press the <HELP> key (if you have one)
	- press the <F1> key (if you have one)
	- type   :help <ENTER>

  Type   :q <ENTER>   to close the help window.

  You can find help on just about any subject, by giving an argument to the
  ":help" command.  Try these (don't forget pressing <ENTER>):

	:help w
	:help c_<T
	:help insert-index
	:help user-manual


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       LESSON 8: CREATE A STARTUP SCRIPT

			  ** Switch on Vim features **

  Vim has many more features than Vi, but most of them are disabled by default.
  To start using more features you have to create a "vimrc" file.

  1. Start editing the "vimrc" file, this depends on your system:
	:edit ~/.vimrc			for Unix
	:edit $VIM/_vimrc		for MS-Windows

  2. Now read the example "vimrc" file text:

	:read $VIMRUNTIME/vimrc_example.vim

  3. Write the file with:

	:write

  The next time you start Vim it will use syntax highlighting.
  You can add all your preferred settings to this "vimrc" file.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       CUSTOM LESSON: Vim surround

    It's easiest to explain with examples. Press cs"' inside

    "Hello world!"
    to change it to

    'Hello world!'
    Now press cs'<q> to change it to

    <q>Hello world!</q>
    To go full circle, press cst" to get

    "Hello world!"
    To remove the delimiters entirely, press ds".

    Hello world!
    Now with the cursor on "Hello", press ysiw] (iw is a text object).

    [Hello] world!
    Let's make that braces and add some space (use } instead of { for no space): cs]{

    { Hello } world!
    Now wrap the entire line in parentheses with yssb or yss).

    ({ Hello } world!)
    Revert to the original text: ds{ds)

    Hello world!
    Emphasize hello: ysiw<em>

    <em>Hello</em> world!
    Finally, let's try out visual mode. Press a capital V (for linewise visual mode) followed by S<p class="important">.

    <p class="important">
      <em>Hello</em> world!
    </p>
    This plugin is very powerful for HTML and XML editing, a niche which currently seems underfilled in Vim land. (As opposed to HTML/XML inserting, for which many plugins are available). Adding, changing, and removing pairs of tags simultaneously is a breeze.

    The . command will work with ds, cs, and yss if you install repeat.vim.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       CUSTOM LESSON: CGN etc.

    
    Change the from "var" to "const" by searhing for "var", use cgn and replace the rest with the .(dot) command.

    var first = 'let';
    var second = 'there';
    var third = 'be';
    var fourth = 'light';

    Change the variable names below to lowercase l by selecting them with a visual block and by pressing I.

    var Lazy_dog1 = 1;
    var Lazy_dog2 = 2;
    var Lazy_dog3 = 3;
    var Lazy_dog4 = 4;




